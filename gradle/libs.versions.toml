[versions]
# kotlin
kotlinVersion = "2.0.20"
kspVersion = "2.0.20-1.0.24"

# kotlinx
kotlinxSerializationVersion = "1.7.2"
kotlinxDateTimeVersion = "0.5.0"
coroutinesVersion = "1.8.1"
kotlinxAtomicVersion = "0.20.2"
kotlinxCollectionsVersion = "0.3.5"

# ktor
ktorClientVersion = "2.3.12"

# multiplatform
multiplatformSettingsVersion = "1.1.1"
napierVersion = "2.6.1"
koinVersion = "3.4.0"
koinKspVersion = "1.2.0"
okioVersion = "3.9.0"
kmmViewModelVersion = "1.0.0-ALPHA-5"
kmmNativeCoroutinesVersion = "1.0.0-ALPHA-7"

# decompose
decomposeVersion = "3.2.0-beta01"
essentyVersion = "2.2.0-beta01"

# mvikotlin
mvikotlin = "4.2.0"

# android
androidPluginVersion = "8.6.1"
composeCompilerVersion = "1.4.7"
lifecycleVersion = "2.8.6"
hiltVersion = "2.47"
androidCoreKtxVersion = "1.13.1"
androidActivityKtxVersion = "1.9.2"
androidPaging = "3.3.2"

# compose
composeVersion = "1.7.2"
composeMaterial3Version = "1.3.0"
compose_motion = "1.0.6"
accompanist = "0.35.0-alpha"

# android tests
espressoCoreVersion = "3.6.1"
testRunnerVersion = "1.6.2"
testExtJunitVersion = "1.2.1"
testCoreVersion = "1.6.1"
robolectricVersion = "4.6.1"
junit = "4.13.2"
appcompat = "1.6.1"

# ksteam
ksteam = "r40"

# camera
camerax = "1.4.0-rc02"
mlkit = "17.3.0"

[plugins]
androidPluginApplication = { id = "com.android.application", version.ref = "androidPluginVersion" }
androidPluginLibrary = { id = "com.android.library", version.ref = "androidPluginVersion" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlinVersion" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlinVersion" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinVersion" }
googleKsp = { id = "com.google.devtools.ksp", version.ref = "kspVersion" }
kmmNativeCoroutines = { id = "com.rickclephas.kmp.nativecoroutines", version.ref = "kmmNativeCoroutinesVersion" }
kotlinAtomicFu = { id = "org.jetbrains.kotlinx.plugin.atomicfu", version.ref = "kotlinxAtomicVersion" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlinVersion" }

[libraries]
# kotlin
kotlinTestJUnit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlinVersion" }

# kotlinx
kotlinSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationVersion" }
kotlinxDateTime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDateTimeVersion" }
kotlinxCollections = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinxCollectionsVersion" }
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutinesVersion" }

# ktor
ktorClient = { module = "io.ktor:ktor-client-core", version.ref = "ktorClientVersion" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktorClientVersion" }
ktorClientMock = { module = "io.ktor:ktor-client-mock", version.ref = "ktorClientVersion" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktorClientVersion" }
ktorClientJsonSerialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktorClientVersion" }
ktorClientAuth = { module = "io.ktor:ktor-client-auth", version.ref = "ktorClientVersion" }
ktorClientEngineOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktorClientVersion" }
ktorClientEngineDarwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktorClientVersion" }

# multiplatform
multiplatformSettings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettingsVersion" }
multiplatformSettingsSerialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatformSettingsVersion" }
multiplatformSettingsTest = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "multiplatformSettingsVersion" }

napier = { module = "io.github.aakira:napier", version.ref = "napierVersion" }
okio = { module = "com.squareup.okio:okio", version.ref = "okioVersion" }
kmmViewModel = { module = "com.rickclephas.kmm:kmm-viewmodel-core", version.ref = "kmmViewModelVersion" }

koin = { module = "io.insert-koin:koin-core", version.ref = "koinVersion" }
koinCoroutines = { module = "io.insert-koin:koin-core-coroutines", version.ref = "koinVersion" }
koinAndroid = { module = "io.insert-koin:koin-android", version.ref = "koinVersion" }
koinAnnotations = { module = "io.insert-koin:koin-annotations", version.ref = "koinKspVersion" }
koinCompiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koinKspVersion" }
hilt = { module = "com.google.dagger:hilt-android", version.ref = "hiltVersion" }

# android
androidKtxCore = { module = "androidx.core:core-ktx", version.ref = "androidCoreKtxVersion" }
androidKtxActivity = { module = "androidx.activity:activity-ktx", version.ref = "androidActivityKtxVersion" }
androidKtxActivityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidActivityKtxVersion" }
lifecycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleVersion" }
lifecycleLivedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycleVersion" }
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleVersion" }
lifecycleViewModelSavedState = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycleVersion" }
lifecycleCommonJava8 = { module = "androidx.lifecycle:lifecycle-common-java8", version.ref = "lifecycleVersion" }
lifecycleServices = { module = "androidx.lifecycle:lifecycle-service", version.ref = "lifecycleVersion" }
lifecycleProcess = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycleVersion" }
lifecycleReactiveStreams = { module = "androidx.lifecycle:lifecycle-reactivestreams-ktx", version.ref = "lifecycleVersion" }
pagingRuntime = { module = "androidx.paging:paging-runtime", version.ref = "androidPaging" }
pagingCompose = { module = "androidx.paging:paging-compose", version.ref = "androidPaging" }

# compose
composeUi = { module = "androidx.compose.ui:ui", version.ref = "composeVersion" }
composeRuntime = { module = "androidx.compose.runtime:runtime", version.ref = "composeVersion" }
composeFoundation = { module = "androidx.compose.foundation:foundation", version.ref = "composeVersion" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "composeVersion" }
composeMaterialIcons = { module = "androidx.compose.material:material-icons-extended", version.ref = "composeVersion" }
composeMaterial3 = { module = "androidx.compose.material3:material3", version.ref = "composeMaterial3Version" }
composeUiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "composeVersion" }
composeUiTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "composeVersion" }
coilCompose = "io.coil-kt:coil-compose:2.6.0"
composeMotionCore = { module = "io.github.fornewid:material-motion-compose-core", version.ref = "compose_motion" }

# accompanist
accompanistNavigation = { module = "com.google.accompanist:accompanist-navigation-material", version.ref = "accompanist" }
accompanistNavigationAnimation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanist" }
accompanistSystemUi = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanist" }
accompanistPermissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanist" }
accompanistPagerIndicators = { module = "com.google.accompanist:accompanist-pager-indicators", version.ref = "accompanist" }
accompanistWeb = { module = "com.google.accompanist:accompanist-webview", version.ref = "accompanist" }

# android tests
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCoreVersion" }
testCore = { module = "androidx.test:core", version.ref = "testCoreVersion" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectricVersion" }
testRunner = { module = "androidx.test:runner", version.ref = "testRunnerVersion" }
testRules = { module = "androidx.test:rules", version.ref = "testRunnerVersion" }
testExtJunit = { module = "androidx.test.ext:junit", version.ref = "testExtJunitVersion" }

# tooling
hiltCompiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hiltVersion" }

# gradle plugins artifacts
kotlinSerializationGradle = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlinVersion" }
hiltGradle = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hiltVersion" }

# decompose
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decomposeVersion" }
decomposeExtensionCompose = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decomposeVersion" }
decomposeExtensionComposeExperimental = { module = "com.arkivanov.decompose:extensions-compose-experimental", version.ref = "decomposeVersion" }
essentyLifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essentyVersion" }
essentyLifecycleCoroutines = { module = "com.arkivanov.essenty:lifecycle-coroutines", version.ref = "essentyVersion" }
essentyStateKeeper = { module = "com.arkivanov.essenty:state-keeper", version.ref = "essentyVersion" }

# ksteam
ksteamCore = { module = "bruhcollective.itaysonlab.ksteam:core-android", version.ref = "ksteam" }
ksteamPersistence = { module = "bruhcollective.itaysonlab.ksteam:core-persistence-android", version.ref = "ksteam" }
ksteamVdf = { module = "bruhcollective.itaysonlab:kotlinx-vdf-android", version.ref = "ksteam" }
ksteamProto = { module = "bruhcollective.itaysonlab.ksteam:proto-common-android", version.ref = "ksteam" }
ksteamClient = { module = "bruhcollective.itaysonlab.ksteam:extension-client-android", version.ref = "ksteam" }

# android
camerax-core = { module = "androidx.camera:camera-core", version.ref = "camerax" }
camerax-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "camerax" }
camerax-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "camerax" }
camerax-mlkit = { module = "androidx.camera:camera-mlkit-vision", version.ref = "camerax" }
camerax-view = { module = "androidx.camera:camera-view", version.ref = "camerax" }
mlkit-barcodescanning = { module = "com.google.mlkit:barcode-scanning", version.ref = "mlkit" }

[bundles]
compose = ["composeUi", "composeFoundation", "composeMaterial", "composeMaterial3", "composeUiToolingPreview"]
androidLifecycle = ["lifecycleRuntime", "lifecycleViewModel", "lifecycleServices"]
ktorClient = ["ktorClient", "ktorClientContentNegotiation", "ktorClientJsonSerialization", "ktorClientLogging"]
ksteam = ["ksteamCore", "ksteamPersistence", "ksteamProto", "ksteamClient", "ksteamVdf"]
camerax = ["camerax-core", "camerax-camera2", "camerax-lifecycle", "camerax-mlkit", "camerax-view"]